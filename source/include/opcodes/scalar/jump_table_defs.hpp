//****************************************************************************//
//**                                                                        **//
//** File:         jump_table_defs.hpp                                      **//
//** Description:  Virtual Machine Core definitions                         **//
//** Comment(s):   Internal developer version only                          **//
//** Library:                                                               **//
//** Created:      2001-08-29                                               **//
//** Author(s):    Karl Churchill                                           **//
//** Note(s):                                                               **//
//** Copyright:    (C)1996 - , eXtropia Studios                             **//
//**               All Rights Reserved.                                     **//
//**                                                                        **//
//****************************************************************************//


// control group
_DECLARE_OP(NOP)
_DECLARE_OP(BRK)

// load group
_DECLARE_OP(LDQ)
_DECLARE_OP(LD_16_I8)
_DECLARE_OP(LD_16_I16)
_DECLARE_OP(LD_16_I32)
_DECLARE_OP(LD_16_I64)
_DECLARE_OP(LD_32_32)
_DECLARE_OP(LD_32_I64)
_DECLARE_OP(LD_32_F64)
_DECLARE_OP(LD_RI_8)
_DECLARE_OP(LD_RI_16)
_DECLARE_OP(LD_RI_32)
_DECLARE_OP(LD_RI_64)
_DECLARE_OP(LD_RIPI_8)
_DECLARE_OP(LD_RIPI_16)
_DECLARE_OP(LD_RIPI_32)
_DECLARE_OP(LD_RIPI_64)
_DECLARE_OP(LD_RIPD_8)
_DECLARE_OP(LD_RIPD_16)
_DECLARE_OP(LD_RIPD_32)
_DECLARE_OP(LD_RIPD_64)
_DECLARE_OP(LD_RID_8)
_DECLARE_OP(LD_RID_16)
_DECLARE_OP(LD_RID_32)
_DECLARE_OP(LD_RID_64)

_DECLARE_OP(LD_8)
_DECLARE_OP(LD_16)
_DECLARE_OP(LD_32)
_DECLARE_OP(LD_64)
_DECLARE_OP(LD_ADDR)

// store group
_DECLARE_OP(ST_RI_8)
_DECLARE_OP(ST_RI_16)
_DECLARE_OP(ST_RI_32)
_DECLARE_OP(ST_RI_64)
_DECLARE_OP(ST_RIPI_8)
_DECLARE_OP(ST_RIPI_16)
_DECLARE_OP(ST_RIPI_32)
_DECLARE_OP(ST_RIPI_64)
_DECLARE_OP(ST_RIPD_8)
_DECLARE_OP(ST_RIPD_16)
_DECLARE_OP(ST_RIPD_32)
_DECLARE_OP(ST_RIPD_64)
_DECLARE_OP(ST_RID_8)
_DECLARE_OP(ST_RID_16)
_DECLARE_OP(ST_RID_32)
_DECLARE_OP(ST_RID_64)
_DECLARE_OP(ST_8)
_DECLARE_OP(ST_16)
_DECLARE_OP(ST_32)
_DECLARE_OP(ST_64)

// move group
_DECLARE_OP(MV_8)
_DECLARE_OP(MV_16)
_DECLARE_OP(MV_32)
_DECLARE_OP(MV_64)
_DECLARE_OP(BSWP_16)
_DECLARE_OP(BSWP_32)
_DECLARE_OP(BSWP_64)
_DECLARE_OP(EXG)

// These functions are defined in the class even for switch-case
//_DECLARE_OP(SV)
//_DECLARE_OP(RS)
//_DECLARE_OP(PUSH_8)
//_DECLARE_OP(PUSH_16)
//_DECLARE_OP(PUSH_32)
//_DECLARE_OP(PUSH_64)
//_DECLARE_OP(POP_8)
//_DECLARE_OP(POP_16)
//_DECLARE_OP(POP_32)
//_DECLARE_OP(POP_64)
//_DECLARE_OP(SALLOC)
//_DECLARE_OP(SFREE)

// jump group
//_DECLARE_OP(BCALL8)
//_DECLARE_OP(BCALL16)
//_DECLARE_OP(CALL)
//_DECLARE_OP(CALLN)

_DECLARE_OP(RET)
_DECLARE_OP(BRA8)
_DECLARE_OP(BRA16)
_DECLARE_OP(CASE)

_DECLARE_OP(BNZ_8)
_DECLARE_OP(BNZ_16)
_DECLARE_OP(BNZ_32)
_DECLARE_OP(BNZ_64)

_DECLARE_OP(BEQ_8)
_DECLARE_OP(BEQ_16)
_DECLARE_OP(BEQ_32)
_DECLARE_OP(BEQ_64)
_DECLARE_OP(BEQ_F32)
_DECLARE_OP(BEQ_F64)
_DECLARE_OP(BGREQ_8)
_DECLARE_OP(BGREQ_16)
_DECLARE_OP(BGREQ_32)
_DECLARE_OP(BGREQ_64)
_DECLARE_OP(BGREQ_F32)
_DECLARE_OP(BGREQ_F64)
_DECLARE_OP(BGR_8)
_DECLARE_OP(BGR_16)
_DECLARE_OP(BGR_32)
_DECLARE_OP(BGR_64)
_DECLARE_OP(BGR_F32)
_DECLARE_OP(BGR_F64)

// cast widening group
_DECLARE_OP(S8_2_S16)
_DECLARE_OP(S8_2_S32)
_DECLARE_OP(S8_2_S64)
_DECLARE_OP(S8_2_F32)
_DECLARE_OP(S8_2_F64)
_DECLARE_OP(S16_2_S32)
_DECLARE_OP(S16_2_S64)
_DECLARE_OP(S16_2_F32)
_DECLARE_OP(S16_2_F64)
_DECLARE_OP(S32_2_S64)
_DECLARE_OP(S32_2_F32)
_DECLARE_OP(S32_2_F64)
_DECLARE_OP(S64_2_F32)
_DECLARE_OP(S64_2_F64)
_DECLARE_OP(U8_2_F32)
_DECLARE_OP(U8_2_F64)
_DECLARE_OP(U16_2_F32)
_DECLARE_OP(U16_2_F64)
_DECLARE_OP(U32_2_F32)
_DECLARE_OP(U32_2_F64)
_DECLARE_OP(U64_2_F32)
_DECLARE_OP(U64_2_F64)
_DECLARE_OP(F32_2_F64)

// cast narrowing group
_DECLARE_OP(F64_2_F32)
_DECLARE_OP(F64_2_S64)
_DECLARE_OP(F64_2_S32)
_DECLARE_OP(F64_2_S16)
_DECLARE_OP(F64_2_S8)
_DECLARE_OP(F32_2_S64)
_DECLARE_OP(F32_2_S32)
_DECLARE_OP(F32_2_S16)
_DECLARE_OP(F32_2_S8)

// aritmetic group
_DECLARE_OP(ADD_I8)
_DECLARE_OP(ADD_I16)
_DECLARE_OP(ADD_I32)
_DECLARE_OP(ADD_I64)
_DECLARE_OP(ADD_F32)
_DECLARE_OP(ADD_F64)

_DECLARE_OP(ADDI_I8)
_DECLARE_OP(ADDI_I16)
_DECLARE_OP(ADDI_I32)

_DECLARE_OP(SUB_I8)
_DECLARE_OP(SUB_I16)
_DECLARE_OP(SUB_I32)
_DECLARE_OP(SUB_I64)
_DECLARE_OP(SUB_F32)
_DECLARE_OP(SUB_F64)
_DECLARE_OP(MUL_U8)
_DECLARE_OP(MUL_U16)
_DECLARE_OP(MUL_U32)
_DECLARE_OP(MUL_U64)
_DECLARE_OP(MUL_S8)
_DECLARE_OP(MUL_S16)
_DECLARE_OP(MUL_S32)
_DECLARE_OP(MUL_S64)
_DECLARE_OP(MUL_F32)
_DECLARE_OP(MUL_F64)
_DECLARE_OP(DIV_U8)
_DECLARE_OP(DIV_U16)
_DECLARE_OP(DIV_U32)
_DECLARE_OP(DIV_U64)
_DECLARE_OP(DIV_S8)
_DECLARE_OP(DIV_S16)
_DECLARE_OP(DIV_S32)
_DECLARE_OP(DIV_S64)
_DECLARE_OP(DIV_F32)
_DECLARE_OP(DIV_F64)
_DECLARE_OP(MOD_U8)
_DECLARE_OP(MOD_U16)
_DECLARE_OP(MOD_U32)
_DECLARE_OP(MOD_U64)
_DECLARE_OP(MOD_S8)
_DECLARE_OP(MOD_S16)
_DECLARE_OP(MOD_S32)
_DECLARE_OP(MOD_S64)
_DECLARE_OP(MOD_F32)
_DECLARE_OP(MOD_F64)
_DECLARE_OP(NEG_S8)
_DECLARE_OP(NEG_S16)
_DECLARE_OP(NEG_S32)
_DECLARE_OP(NEG_S64)
_DECLARE_OP(NEG_F32)
_DECLARE_OP(NEG_F64)

_DECLARE_OP(ASR_S8)
_DECLARE_OP(ASR_S16)
_DECLARE_OP(ASR_S32)
_DECLARE_OP(ASR_S64)
_DECLARE_OP(MIN_S8)
_DECLARE_OP(MIN_S16)
_DECLARE_OP(MIN_S32)
_DECLARE_OP(MIN_S64)
_DECLARE_OP(MIN_F32)
_DECLARE_OP(MIN_F64)
_DECLARE_OP(MAX_S8)
_DECLARE_OP(MAX_S16)
_DECLARE_OP(MAX_S32)
_DECLARE_OP(MAX_S64)
_DECLARE_OP(MAX_F32)
_DECLARE_OP(MAX_F64)

// logic group
_DECLARE_OP(AND_8)
_DECLARE_OP(AND_16)
_DECLARE_OP(AND_32)
_DECLARE_OP(AND_64)
_DECLARE_OP(OR_8)
_DECLARE_OP(OR_16)
_DECLARE_OP(OR_32)
_DECLARE_OP(OR_64)
_DECLARE_OP(XOR_8)
_DECLARE_OP(XOR_16)
_DECLARE_OP(XOR_32)
_DECLARE_OP(XOR_64)
_DECLARE_OP(INV_8)
_DECLARE_OP(INV_16)
_DECLARE_OP(INV_32)
_DECLARE_OP(INV_64)
_DECLARE_OP(LSL_8)
_DECLARE_OP(LSL_16)
_DECLARE_OP(LSL_32)
_DECLARE_OP(LSL_64)
_DECLARE_OP(LSR_8)
_DECLARE_OP(LSR_16)
_DECLARE_OP(LSR_32)
_DECLARE_OP(LSR_64)
_DECLARE_OP(ROL_8)
_DECLARE_OP(ROL_16)
_DECLARE_OP(ROL_32)
_DECLARE_OP(ROL_64)
_DECLARE_OP(ROR_8)
_DECLARE_OP(ROR_16)
_DECLARE_OP(ROR_32)
_DECLARE_OP(ROR_64)

// These functions are defined in the class even for switch-case

// misc group
_DECLARE_OP(ILLEGAL);

static const Handler handlers[256];         // normal handlers

